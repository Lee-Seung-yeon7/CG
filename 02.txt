//모양 변형 애니메이션 (shape.c)     
19개 서로 다른 모양이 하나씩 바뀌면서 디스플레이 하도록 변경한다.
변해가는 모양이 잘 보이도록 천천히 디스플레이되도록 변경한다. 
한 모양에 대해 크기를 약간씩 확대해가도록 하고 2배가 되면 다시 1배 크기로 만들고
반복한다.
윈도우 내에 물체 모양이 잘 보이도록 좌표 공간을 크게 한다. 


// Shapes.c
// OpenGL SuperBible, Chapter 3
// Demonstrates GLUT menuing and some GLUT prebuilt shapes
// Program by Richard S. Wright Jr.
#include <windows.h>
#include <gl/gl.h>
#include <gl/glu.h>
#include <gl/glut.h>
// Rotation amounts
static GLfloat xRot = 0.0f;
static GLfloat yRot = 0.0f;
// Light values and coordinates
GLfloat  ambientLight[] = { 0.3f, 0.3f, 0.3f, 1.0f };
GLfloat  diffuseLight[] = { 0.7f, 0.7f, 0.7f, 1.0f };
GLfloat  specular[] = { 1.0f, 1.0f, 1.0f, 1.0f};
GLfloat  specref[] =  { 1.0f, 1.0f, 1.0f, 1.0f };
static int iShape = 1;
static float pSphere= 1.0;
static float pCube = 1.0;
static float pCone = 0.3;
static float pTorus = 0.3;
static float pDodeca = 1.0;
static float pOcta = 1.0;
static float pTetra = 1.0;
static float pIcosa = 1.0;

static float pTeapot = 1.0;
//////////////////////////////////////////////////////////////////////////////
// Reset flags as appropriate in response to menu selections
void ProcessMenu(int value)
{
    iShape = value;
glutPostRedisplay();
}
// Called to draw scene
void RenderScene(void)
{
// Clear the window
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    // Save matrix state and do the rotation
glPushMatrix();
glRotatef(xRot, 1.0f, 0.0f, 0.0f);
glRotatef(yRot, 0.0f, 1.0f, 0.0f);
    switch(iShape)
        {
        case 1:
if(iShape<19)pSphere += 0.1;
else pSphere = 1.0;
            glutWireSphere(pSphere, 25, 25);
            break;
     case 2:
if(iShape<19)pCube += 0.1;
else pCube = 1.0;
            glutWireCube(pCube);
            break;
        case 3:
if(iShape<19) pCone += 0.1;
else pCone = 0.3;
            glutWireCone(pCone, 1.1f, 20, 20);
            break;
        case 4:
if(iShape<19) pTorus += 0.1;
else pTorus = 0.3;
            glutWireTorus(pTorus, 1.0f, 10, 25);
            break;
        case 5:
if (iShape <19) pDodeca +=0.1;
else pDodeca = 1.0;
glPushMatrix();
glScalef(pDodeca,pDodeca,pDodeca);
            glutWireDodecahedron();
glPopMatrix();
            break;
        case 6:
if (iShape <19) pOcta +=0.1;
else pOcta = 1.0;
glPushMatrix();
glScalef(pOcta,pOcta,pOcta);
            glutWireOctahedron();
glPopMatrix();
            break;
        case 7:
if (iShape <19) pTetra +=0.1;
else pTetra = 1.0;
glPushMatrix();
glScalef(pTetra,pTetra,pTetra);
            glutWireTetrahedron();
glPopMatrix();
            break;
        case 8:
if (iShape <19) pIcosa +=0.1;
else pIcosa = 1.0;
glPushMatrix();
glScalef(pIcosa,pIcosa,pIcosa);
            glutWireIcosahedron();
glPopMatrix();
            break;
        case 9:
if (iShape <19) pTeapot +=0.1;
else pTeapot = 1.0;
glPushMatrix();
           glutWireTeapot(pTeapot);
        break;
        case 11:
if(iShape<19)pSphere += 0.1;
else pSphere = 1.0;
            glutSolidSphere(pSphere, 25, 25);
            break;
        case 12:
if(iShape<19)pCube += 0.1;
else pCube = 1.0;
           glutSolidCube(pCube);
            break;
        case 13:
if(iShape<19) pCone += 0.1;
else pCone = 0.3;
            glutSolidCone(pCone, 1.1f, 20, 20);
            break;
        case 14:
if(iShape<19) pTorus += 0.1;
else pTorus = 0.3;
            glutSolidTorus(pTorus, 1.0f, 10, 25);
            break;
        case 15:
if (iShape <19) pDodeca +=0.1;
else pDodeca = 1.0;
glPushMatrix();
glScalef(pDodeca,pDodeca,pDodeca);
            glutSolidDodecahedron();
glPopMatrix();
            break;
        case 16:
if (iShape <19) pOcta +=0.1;
else pOcta = 1.0;
glPushMatrix();
glScalef(pOcta,pOcta,pOcta);
            glutSolidOctahedron();
glPopMatrix();
            break;
        case 17:
if (iShape <19) pTetra +=0.1;
else pTetra = 1.0;
glPushMatrix();
glScalef(pTetra,pTetra,pTetra);
            glutSolidTetrahedron();
glPopMatrix();
            break;
        case 18:
if (iShape <19) pIcosa +=0.1;
else pIcosa = 1.0;
glPushMatrix();
glScalef(pIcosa,pIcosa,pIcosa);
            glutSolidIcosahedron();

glPopMatrix();
            break;
        default:
if (iShape <19) pTeapot +=0.1;
else pTeapot = 1.0;
glPushMatrix();
glScalef(pTeapot,pTeapot,pTeapot);
            glutSolidTeapot(1.0f);
glPopMatrix();
            break;
        }
// Restore transformations
glPopMatrix();
// Flush drawing commands
glutSwapBuffers();
}
// This function does any needed initialization on the rendering
// context. 
void SetupRC()
{
// Black background
glClearColor(0.0f, 0.0f, 0.0f, 1.0f );
    // Enable Depth Testing
    glEnable(GL_DEPTH_TEST);
// Enable lighting
glEnable(GL_LIGHTING);
// Setup and enable light 0
glLightfv(GL_LIGHT0,GL_AMBIENT,ambientLight);
glLightfv(GL_LIGHT0,GL_DIFFUSE,diffuseLight);
glLightfv(GL_LIGHT0,GL_SPECULAR,specular);
glEnable(GL_LIGHT0);
// Enable color tracking
glEnable(GL_COLOR_MATERIAL);
// Set Material properties to follow glColor values
glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
// All materials hereafter have full specular reflectivity
// with a high shine
glMaterialfv(GL_FRONT, GL_SPECULAR,specref);
glMateriali(GL_FRONT,GL_SHININESS,128);
// Set drawing color to blue
glColor3ub(0, 0, 255);
}

void SpecialKeys(int key, int x, int y)
{
if(key == GLUT_KEY_UP)
xRot-= 5.0f;
if(key == GLUT_KEY_DOWN)
xRot += 5.0f;
if(key == GLUT_KEY_LEFT)
yRot -= 5.0f;
if(key == GLUT_KEY_RIGHT)
yRot += 5.0f; 

if(key > 356.0f)
xRot = 0.0f;

if(key < -1.0f)
xRot = 355.0f;

if(key > 356.0f)
yRot = 0.0f;

if(key < -1.0f)
yRot = 355.0f;
// Refresh the Window
glutPostRedisplay();
}
void TimerFunction(int value)
{
// Reverse direction when you reach left or right edge
/*if(x1 > windowWidth-rsize || x1 < 0)
xstep = -xstep;
// Reverse direction when you reach top or bottom edge
if(y1 > windowHeight-rsize || y1 < 0)
ystep = -ystep;
// Check bounds.  This is incase the window is made
// smaller and the rectangle is outside the new
// clipping volume
if(x1 > windowWidth-rsize)
x1 = windowWidth-rsize-1;
if(y1 > windowHeight-rsize)
y1 = windowHeight-rsize-1;
// Actually move the square
x1 += xstep;

y1 += ystep;*/
if(iShape<19) iShape++;
else iShape = 1;
// Redraw the scene with new coordinates
    glutPostRedisplay();
glutTimerFunc(33,TimerFunction, 1);
}
void ChangeSize(int w, int h)
{
GLfloat lightPos[] = { -50.f, 50.0f, 100.0f, 1.0f };
//GLfloat nRange = 1.9f;
GLfloat nRange = 3.9f;
// Prevent a divide by zero
if(h == 0)
h = 1;
// Set Viewport to window dimensions
    glViewport(0, 0, w, h);

// Reset projection matrix stack
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
// Establish clipping volume (left, right, bottom, top, near, far)
    if (w <= h) 
glOrtho (-nRange, nRange, -nRange*h/w, nRange*h/w, -nRange, nRange);
    else 
glOrtho (-nRange*w/h, nRange*w/h, -nRange, nRange, -nRange, nRange);
// Reset Model view matrix stack
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
glLightfv(GL_LIGHT0,GL_POSITION,lightPos);
}
int main(int argc, char* argv[])
{
int nSolidMenu;
int nWireMenu;
int nMainMenu;
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
glutCreateWindow("GLUT Shapes");
// Create the Menu
nWireMenu = glutCreateMenu(ProcessMenu);
glutAddMenuEntry("Sphere",1);
glutAddMenuEntry("Cube",2);
glutAddMenuEntry("Cone",3);
glutAddMenuEntry("Torus",4);
glutAddMenuEntry("Dodecahedron",5);
glutAddMenuEntry("Octahedron",6);
glutAddMenuEntry("Tetrahedron",7);
glutAddMenuEntry("Icosahedron",8);
glutAddMenuEntry("Teapot",9);
nSolidMenu = glutCreateMenu(ProcessMenu);
glutAddMenuEntry("Sphere",11);
glutAddMenuEntry("Cube",12);
glutAddMenuEntry("Cone",13);
glutAddMenuEntry("Torus",14);
glutAddMenuEntry("Dodecahedron",15);
glutAddMenuEntry("Octahedron",16);
glutAddMenuEntry("Tetrahedron",17);
glutAddMenuEntry("Icosahedron",18);
glutAddMenuEntry("Teapot",19);
nMainMenu = glutCreateMenu(ProcessMenu);
glutAddSubMenu("Wire", nWireMenu);
   glutAddSubMenu("Solid", nSolidMenu);
glutAttachMenu(GLUT_RIGHT_BUTTON);
glutTimerFunc(33, TimerFunction, 1);
glutReshapeFunc(ChangeSize);
glutSpecialFunc(SpecialKeys);
glutDisplayFunc(RenderScene);
SetupRC();
glutMainLoop();
return 0;
}