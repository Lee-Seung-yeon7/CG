//걷기 로봇 애니메이션 (robot.c) 
로봇을 세로로 재구성하여 다리 형상으로 한다
오른쪽으로 이동하는 움직임과 다리 관절에서의
회전도 포함하여 걷는 형상의 애니메이션 
각 관절에서의 움직임에 제한을 둘 것. 즉, 각
관절에서의 움직임이 90도 이상 돌아가지 않도록
회전의 범위를 둔다.


/*
 * Copyright (c) 1993-1999, Silicon Graphics, Inc.
 * ALL RIGHTS RESERVED 
 * Permission to use, copy, modify, and distribute this software for 
 * any purpose and without fee is hereby granted, provided that the above
 * copyright notice appear in all copies and that both the copyright notice
 * and this permission notice appear in supporting documentation, and that 
 * the name of Silicon Graphics, Inc. not be used in advertising
 * or publicity pertaining to distribution of the software without specific,
 * written prior permission. 
 *
 * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
 * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON
 * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,
 * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY
 * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,
 * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF
 * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
 * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
 * 
 * US Government Users Restricted Rights 
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph
 * (c)(1)(ii) of the Rights in Technical Data and Computer Software
 * clause at DFARS 252.227-7013 and/or in similar or successor
 * clauses in the FAR or the DOD or NASA FAR Supplement.
 * Unpublished-- rights reserved under the copyright laws of the
 * United States.  Contractor/manufacturer is Silicon Graphics,
 * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311.
 *
 * OpenGL(R) is a registered trademark of Silicon Graphics, Inc.
 */

/*
 * robot.c
 * This program shows how to composite modeling transformations
 * to draw translated and rotated hierarchical models.
 * Interaction:  pressing the s and e keys (shoulder and elbow)
 * alters the rotation of the robot arm.
 */
#include <GL/glut.h>
#include <stdlib.h>

static int shoulder1 = 0, elbow1 = 0;
static int shoulder2 = 0, elbow2 = 0;
static GLfloat xRot = 0.0f;
static GLfloat yRot = 0.0f;
static float root = -3.0;
static int seq = 0;

void init(void) 
{
   glClearColor (0.0, 0.0, 0.0, 0.0);
   glShadeModel (GL_FLAT);
}

void display(void)
{
   glClear (GL_COLOR_BUFFER_BIT);

   glPushMatrix();

   glRotatef(xRot, 1.0, 0.0, 0.0);
   glRotatef(yRot, 0.0, 1.0, 0.0);

   glTranslatef (root, 0.0, 0.0);
   root += 0.1;



   glRotatef(-90.0, 0.0, 0.0, 1.0);

   // 왼다리시작

   glPushMatrix();
   glTranslatef(0.0, 0.0, -0.1);

   glPushMatrix();
   glTranslatef(-1.0, 0.0, 0.0);
   glRotatef((GLfloat) shoulder1, 0.0, 0.0, 1.0);
   glTranslatef(1.0, 0.0, 0.0);
   glPushMatrix();
   glScalef(2.0, 0.4, 1.0);
   glutWireCube(1.0);
   glPopMatrix();

   glTranslatef(1.0, 0.0, 0.0);
   glRotatef((GLfloat) elbow1, 0.0, 0.0, 1.0);
   glTranslatef(1.0, 0.0, 0.0);
   glPushMatrix();
   glScalef(2.0, 0.4, 1.0);
   glutWireCube(1.0);
   glPopMatrix();

   glPopMatrix();

   glPopMatrix();   // 왼다리끝

   glPushMatrix(); // 오른다리시작

   glTranslatef(0.0, 0.0, 1.0);

   glPushMatrix();
   glTranslatef(-1.0, 0.0, 0.0);
   glRotatef((GLfloat) shoulder2, 0.0, 0.0, 1.0);
   glTranslatef(1.0, 0.0, 0.0);
   glPushMatrix();
   glScalef(2.0, 0.4, 1.0);
   glutWireCube(1.0);
   glPopMatrix();


   glTranslatef(1.0, 0.0, 0.0);
   glRotatef((GLfloat) elbow2, 0.0, 0.0, 1.0);
   glTranslatef(1.0, 0.0, 0.0);
   glPushMatrix();
   glScalef(2.0, 0.4, 1.0);
   glutWireCube(1.0);
   glPopMatrix();

   glPopMatrix();// 오른다리끝

   glPopMatrix();

   glPopMatrix();

   glutSwapBuffers();
}


// Setup the rendering state
void SetupRC(void)
    {
    // Set clear color to blue
    glClearColor(0.0f, 0.0f, 1.0f, 1.0f);
    }



void reshape (int w, int h)
{
   glViewport (0, 0, (GLsizei) w, (GLsizei) h); 
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
   //gluPerspective(65.0, (GLfloat) w/(GLfloat) h, 1.0, 20.0);
   gluPerspective(90.0, (GLfloat) w/(GLfloat) h, 1.0, 20.0);
   glMatrixMode(GL_MODELVIEW);
   glLoadIdentity();
   glTranslatef (0.0, 0.0, -5.0);
}

void TimerFunction(int value)
{
// Reverse direction when you reach left or right edge
   /*
if(x1 > windowWidth-rsize || x1 < 0)
xstep = -xstep;

// Reverse direction when you reach top or bottom edge
if(y1 > windowHeight-rsize || y1 < 0)
ystep = -ystep;


// Check bounds.  This is incase the window is made
// smaller and the rectangle is outside the new
// clipping volume
if(x1 > windowWidth-rsize)
x1 = windowWidth-rsize-1;

if(y1 > windowHeight-rsize)
y1 = windowHeight-rsize-1;

// Actually move the square
x1 += xstep;
y1 += ystep;
*/

if ((seq >=0) && (seq < 10)) {
shoulder1 = (shoulder1 + 4) % 360;
shoulder2 = (shoulder2 - 4) % 360;
elbow1 = (elbow1 - 2) % 360;
elbow2 = (elbow2 - 2) % 360;
seq++;
glutPostRedisplay();
}
else if ((seq >= 10) && (seq < 20)) {
shoulder1 = (shoulder1 - 4) % 360;
shoulder2 = (shoulder2 + 4) % 360;
elbow1 = (elbow1 + 2) % 360;
elbow2 = (elbow2 + 2) % 360;
seq++;
glutPostRedisplay();
}
else if ((seq >= 20) && (seq < 30)) {
shoulder1 = (shoulder1 - 4) % 360;
shoulder2 = (shoulder2 + 4) % 360;
elbow1 = (elbow1 - 2) % 360;
elbow2 = (elbow2 - 2) % 360;
seq++;
glutPostRedisplay();
}
else if ((seq >=30) && (seq < 40)) {
shoulder1 = (shoulder1 + 4) % 360;
shoulder2 = (shoulder2 - 4) % 360;
elbow1 = (elbow1 + 2) % 360;
elbow2 = (elbow2 + 2) % 360;
seq++;

if(seq >= 40) {
seq = 0;
if (root > 3.0) root = -3.0;
}

glutPostRedisplay();
}



// Redraw the scene with new coordinates
    glutPostRedisplay();
glutTimerFunc(33,TimerFunction, 1);
}


void keyboard (unsigned char key, int x, int y)
{
   switch (key) {
      case 's':
         shoulder1 = (shoulder1 + 5) % 360;
         glutPostRedisplay();
         break;
      case 'S':
         shoulder1 = (shoulder1 - 5) % 360;
         glutPostRedisplay();
         break;
      case 'e':
         elbow1 = (elbow1 + 5) % 360;
         glutPostRedisplay();
         break;
      case 'E':
         elbow1 = (elbow1 - 5) % 360;
         glutPostRedisplay();
         break;
      case 27:
         exit(0);
         break;
      default:
         break;
   }
}

int main(int argc, char** argv)
{
   glutInit(&argc, argv);
   glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
   glutInitWindowSize (500, 500); 
   glutInitWindowPosition (100, 100);
   glutCreateWindow ("17018060 이승연");
   init ();
   glutDisplayFunc(display);
   glutTimerFunc(33, TimerFunction, 1);
   glutReshapeFunc(reshape);
   glutKeyboardFunc(keyboard);
   glutMainLoop();
   return 0;
}