//모양과 컬러 변화 애니메이션 ? ccube.c 응용 
ccube.c 프로그램을 응용하여 물체의 모양과 컬러가 자동적으로 변화하는 애니메이션 작성
물체의 모양 변화는 육면체 좌표를 이동시켜서 얻는다. 
물체의 모양 변화가 잘 보이도록 여러 방향으로 회전시킨다.


// ccube.c
// OpenGL SuperBible, Chapter 6
// Demonstrates primative RGB Color Cube
// Program by Richard S. Wright Jr.

#include <windows.h>
#include <gl/gl.h>
#include <gl/glu.h>
#include <gl/glut.h>
#include <math.h>
static int i;
//=================================================================================================
// Called by GLUT library when idle (window not being
// resized or moved)
void TimerFunction(int value)
	{
	// Reverse direction when you reach left or right edge
	/*if(x1 > windowWidth-rsize || x1 < 0)
		xstep = -xstep;

	// Reverse direction when you reach top or bottom edge
	if(y1 > windowHeight-rsize || y1 < 0)
		ystep = -ystep;


	// Check bounds.  This is incase the window is made
	// smaller and the rectangle is outside the new
	// clipping volume
	if(x1 > windowWidth-rsize)
		x1 = windowWidth-rsize-1;

	if(y1 > windowHeight-rsize)
		y1 = windowHeight-rsize-1;

	// Actually move the square
	x1 += xstep;
	y1 += ystep;
	*/
static GLfloat xRot = 0.0f;
static GLfloat yRot = 0.0f;

static GLfloat v0[3] = {50.0, 50.0, 50.0};
static GLfloat v1[3] = {50.0, -50.0, 50.0};
static GLfloat v2[3] = {-50.0, -50.0, 50.0};
static GLfloat v3[3] = {-50.0, 50.0, 50.0};
static GLfloat v4[3] = {50.0, 50.0, -50.0};
static GLfloat v5[3] = {50.0, -50.0, -50.0};
static GLfloat v6[3] = {-50.0, -50.0, -50.0};
static GLfloat v7[3] = {-50.0, 50.0, -50.0};

static GLfloat vv0[3] = {50.0, 50.0, 50.0};
static GLfloat vv1[3] = {50.0, -50.0, 50.0};
static GLfloat vv2[3] = {-50.0, -50.0, 50.0};
static GLfloat vv3[3] = {-50.0, 50.0, 50.0};
static GLfloat vv4[3] = {50.0, 50.0, -50.0};
static GLfloat vv5[3] = {50.0, -50.0, -50.0};
static GLfloat vv6[3] = {-50.0, -50.0, -50.0};
static GLfloat vv7[3] = {-50.0, 50.0, -50.0};

static GLfloat c0[3] = {1.0, 1.0, 1.0};
static GLfloat c1[3] = {1.0, 1.0, 0.0};
static GLfloat c2[3] = {1.0, 0.0, 1.0};
static GLfloat c3[3] = {1.0, 0.0, 1.0};
static GLfloat c4[3] = {0.0, 1.0, 1.0};
static GLfloat c5[3] = {0.0, 1.0, 0.0};
static GLfloat c6[3] = {0.0, 0.0, 0.0};
static GLfloat c7[3] = {0.0, 0.0, 1.0};

static GLfloat vadd = 1.0;
static GLfloat cadd = 0.1;

static int inc0 = 0;
static int inc1 = 0;
static int inc2 = 0;
static int inc3 = 0;
static int inc4 = 0;
static int inc5 = 0;
static int inc6 = 0;
static int inc7 = 0;
//'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

//v0		
		for(i=0; i<3; i++) {
			if (inc0 == 0) {
			if (v0[i] >= 40.0) v0[i]-= vadd;
			else inc0 = 1;}
			else {
				if (v0[i] < 60.0) v0[i] += vadd;
				else inc0 = 0;}}
//v1
		for(i=0; i<3; i++) {
			if ((i == 0) || (i == 2)) {
			if (inc1 == 0) {
			if (v1[i] >= 40.0) v1[i]-= vadd;
			else inc1 = 1;}
			else {
				if (v1[i] < 60.0) v1[i] += vadd;
				else inc1 = 0;}}
			if (i==1){
				if (inc1 == 0) {
			if (v1[i] >= 40.0) v1[i]-= vadd;
			else inc1 = 1;}}}
//v2
		for(i=0; i<3; i++) {
			if ((i==2)) {
			if (inc0 == 0) {
			if (v0[i] >= 40.0) v0[i]-= vadd;
			else inc0 = 1;}
			else {
				if (v0[i] < 60.0) v0[i] += vadd;
				else inc0 = 0;}}
		
//v3
		for(i=0; i<3; i++) {
			if (inc0 == 0) {
			if (v0[i] >= 40.0) v0[i]-= vadd;
			else inc0 = 1;}
			else {
				if (v0[i] < 60.0) v0[i] += vadd;
				else inc0 = 0;}}
//v4
		for(i=0; i<3; i++) {
			if (inc0 == 0) {
			if (v0[i] >= 40.0) v0[i]-= vadd;
			else inc0 = 1;}
			else {
				if (v0[i] < 60.0) v0[i] += vadd;
				else inc0 = 0;}}
//v5
		for(i=0; i<3; i++) {
			if (inc0 == 0) {
			if (v0[i] >= 40.0) v0[i]-= vadd;
			else inc0 = 1;}
			else {
				if (v0[i] < 60.0) v0[i] += vadd;
				else inc0 = 0;}}
//v6
		for(i=0; i<3; i++) {
			if (inc0 == 0) {
			if (v0[i] >= 40.0) v0[i]-= vadd;
			else inc0 = 1;}
			else {
				if (v0[i] < 60.0) v0[i] += vadd;
				else inc0 = 0;}}
//v7
		for(i=0; i<3; i++) {
			if (inc0 == 0) {
			if (v0[i] >= 40.0) v0[i]-= vadd;
			else inc0 = 1;}
			else {
				if (v0[i] < 60.0) v0[i] += vadd;
				else inc0 = 0;}}
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		for (i =0; i<3; i++) {
			if (c0[i]>= 1.0) c0[i] = 0.0;
			else c0[i] += cadd;
		for (i =0; i<3; i++) {
			if (c1[i]>= 1.0) c0[i] = 0.0;
			else c1[i] += cadd;
		for (i =0; i<3; i++) {
			if (c2[i]>= 1.0) c0[i] = 0.0;
			else c2[i] += cadd;
		for (i =0; i<3; i++) {
			if (c3[i]>= 1.0) c0[i] = 0.0;
			else c3[i] += cadd;
		for (i =0; i<3; i++) {
			if (c4[i]>= 1.0) c0[i] = 0.0;
			else c4[i] += cadd;
		for (i =0; i<3; i++) {
			if (c5[i]>= 1.0) c0[i] = 0.0;
			else c5[i] += cadd;
		for (i =0; i<3; i++) {
			if (c6[i]>= 1.0) c0[i] = 0.0;
			else c6[i] += cadd;
		for (i =0; i<3; i++) {
			if (c7[i]>= 1.0) c0[i] = 0.0;
			else c7[i] += cadd;

		}
		
	// Redraw the scene with new coordinates
    glutPostRedisplay();
	glutTimerFunc(33,TimerFunction, 1);
	}
//============================================================================================================
// Rotation amounts

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Called to draw scene
void RenderScene(void);
	{
	// Clear the window with current clearing color
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
    glPushMatrix();

   	glRotatef(xRot, 1.0f, 0.0f, 0.0f);
	glRotatef(yRot, 0.0f, 1.0f, 0.0f);


	// Front face
	glBegin(GL_POLYGON);
		// White
		glColor3f( c0[0], c0[1],c0[2]);
		glVertex3f(v0[0],v0[1],v0[2]);

		// Yellow
		glColor3f( c1[0], c1[1], c1[2]);
		glVertex3f(v1[0],v1[1],v1[2]);

		// Red
		glColor3f(c2[0], c2[1], c2[2]);
		glVertex3f(v2[0],v2[1],v2[2]);

		// Magenta
		glColor3f( c3[0], c3[1], c3[2]);
		glVertex3f(v3[0],v3[1],v3[2]);
	glEnd();

	
	// Back Face
	glBegin(GL_POLYGON);
		// Cyan
		glColor3f(c4[0], c4[1], c4[2]);
		glVertex3f(v4[0], v4[1], v4[2]);

		// Green
	glColor3f(c5[0], c5[1], c5[2]);
		glVertex3f(v5[0], v5[1], v5[2]);
		
		// Black
glColor3f(c6[0], c6[1], c6[2]);
		glVertex3f(v6[0], v6[1], v6[2]);

		// Blue
		glColor3f(c7[0], c7[1], c7[2]);
		glVertex3f(v7[0], v7[1], v7[2]);
	glEnd();


	// Top Face
	glBegin(GL_POLYGON);
		// Cyan
		glColor3f(0.0f, 1.0f, 1.0f);
		glVertex3f(50.0f,50.0f,-50.0f);

		// White
		glColor3f(1.0f, 1.0f, 1.0f);
		glVertex3f(50.0f,50.0f,50.0f);

		// Magenta
		glColor3f(1.0f, 0.0f, 1.0f);
		glVertex3f(-50.0f,50.0f,50.0f);

		// Blue
		glColor3f(0.0f, 0.0f, 1.0f);
		glVertex3f(-50.0f,50.0f,-50.0f);
	glEnd();


	// Bottom Face
	glBegin(GL_POLYGON);
		// Green
		glColor3f(0.0f, 1.0f, 0.0f);
		glVertex3f(50.0f,-50.0f,-50.0f);

		// Yellow
		glColor3f(1.0f, 1.0f, 0.0f);
		glVertex3f(50.0f,-50.0f,50.0f);

		// Red
		glColor3f(1.0f, 0.0f, 0.0f);
		glVertex3f(-50.0f,-50.0f,50.0f);

		// Black
		glColor3f(0.0f, 0.0f, 0.0f);
		glVertex3f(-50.0f,-50.0f,-50.0f);
	glEnd();


	// Left face
	glBegin(GL_POLYGON);
		// White
		glColor3f(1.0f, 1.0f, 1.0f);
		glVertex3f(50.0f,50.0f,50.0f);

		// Cyan
		glColor3f(0.0f, 1.0f, 1.0f);
		glVertex3f(50.0f,50.0f,-50.0f);

		// Green
		glColor3f(0.0f, 1.0f, 0.0f);
		glVertex3f(50.0f,-50.0f,-50.0f);

		// Yellow
		glColor3f(1.0f, 1.0f, 0.0f);
		glVertex3f(50.0f,-50.0f,50.0f);
	glEnd();


	// Right face
	glBegin(GL_POLYGON);
		// Magenta
		glColor3f(1.0f, 0.0f, 1.0f);
		glVertex3f(-50.0f,50.0f,50.0f);

		// Blue
		glColor3f(0.0f, 0.0f, 1.0f);
		glVertex3f(-50.0f,50.0f,-50.0f);

		// Black
		glColor3f(0.0f, 0.0f, 0.0f);
		glVertex3f(-50.0f,-50.0f,-50.0f);

		// Red
		glColor3f(1.0f, 0.0f, 0.0f);
		glVertex3f(-50.0f,-50.0f,50.0f);
	glEnd();

    glPopMatrix();

	// Show the graphics
	glutSwapBuffers();
	}

// This function does any needed initialization on the rendering
// context. 
void SetupRC();
	{
	// Black background
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f );

	glEnable(GL_DEPTH_TEST);	
//	glEnable(GL_DITHER);
	glShadeModel(GL_SMOOTH);
    }

void SpecialKeys(int key, int x, int y);
	{
	if(key == GLUT_KEY_UP)
		xRot-= 5.0f;

	if(key == GLUT_KEY_DOWN)
		xRot += 5.0f;

	if(key == GLUT_KEY_LEFT)
		yRot -= 5.0f;

	if(key == GLUT_KEY_RIGHT)
		yRot += 5.0f;

	if(key > 356.0f)
		xRot = 0.0f;

	if(key < -1.0f)
		xRot = 355.0f;

	if(key > 356.0f)
		yRot = 0.0f;

	if(key < -1.0f)
		yRot = 355.0f;

	// Refresh the Window
	glutPostRedisplay();
	}


void ChangeSize(int w, int h);
	{
	GLfloat nRange = 100.0f;

	// Prevent a divide by zero
	if(h == 0)
		h = 1;

	// Set Viewport to window dimensions
    glViewport(0, 0, w, h);

	// Reset coordinate system
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// Establish clipping volume (left, right, bottom, top, near, far)
    if (w <= h) 
		glOrtho (-nRange, nRange, -nRange*h/w, nRange*h/w, -nRange, nRange);
    else 
		glOrtho (-nRange*w/h, nRange*w/h, -nRange, nRange, -nRange, nRange);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	}

int main(int argc, char* argv[])
	{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutCreateWindow("RGB Cube");
	glutReshapeFunc(ChangeSize);
	glutSpecialFunc(SpecialKeys);
	glutDisplayFunc(RenderScene);
	SetupRC();
	glutMainLoop();

	glutTimerFunc(33,TimerFunction, 1);

	return 0;
	}