// Lines.c
// OpenGL SuperBible, Chapter 4
// Demonstrates primative GL_LINES
// Program by Richard S. Wright Jr.

#include <windows.h>
#include <gl/gl.h>
#include <gl/glu.h>
#include <gl/glut.h>
#include <math.h>

// Define a constant for the value of PI
#define GL_PI 3.1415f
Printf(“17018060 이승연 컴퓨터 sw”);

// Rotation amounts
static GLfloat xRot = 0.0f;
static GLfloat yRot = 0.0f;

static int slow = 0;

// Called to draw scene
void RenderScene(void)
{
GLfloat x, y, z, angle; // Storeage for coordinates and angles

// Clear the window with current clearing color
glClear(GL_COLOR_BUFFER_BIT);

// Save matrix state and do the rotation
glPushMatrix();
glRotatef(xRot, 1.0f, 0.0f, 0.0f);
glRotatef(yRot, 0.0f, 1.0f, 0.0f);

// Call only once for all remaining points
glBegin(GL_LINES);

z = 0.0f;
for (angle = 0.0f; angle <= GL_PI * 3.0f; angle += 0.5f)
{
// Top half of the circle
x = 50.0f*sin(angle);
y = 50.0f*cos(angle);
glVertex3f(x, y, z);

// Bottom half of the circle
x = 50.0f*sin(angle + 3.1415f);
y = 50.0f*cos(angle + 3.1415f);
glVertex3f(x, y, z);
}

// Done drawing points
glEnd();

// Restore transformations
glPopMatrix();

xRot += 2.0;
yRot += 2.0;

if (slow == 0) {
xRot += 15.0;
yRot += 15.0;
}

if (slow == 1) {
xRot += 0.001;
yRot += 0.001;
}

if (xRot == GLUT_KEY_UP)
xRot -= 5.0f;

if (xRot == GLUT_KEY_DOWN)
xRot += 5.0f;

if (yRot == GLUT_KEY_LEFT)
yRot -= 5.0f;

if (yRot == GLUT_KEY_RIGHT)
yRot += 5.0f;

glutPostRedisplay();

// Flush drawing commands
glutSwapBuffers();
}

// This function does any needed initialization on the rendering
// context. 
void SetupRC()
{
// Black background
glClearColor(0.0f, 0.0f, 0.0f, 1.0f);

// Set drawing color to green
glColor3f(0.0f, 1.0f, 0.0f);
}

void SpecialKeys(int key, int x, int y)
{

switch (key) {
case GLUT_KEY_LEFT:
slow = 0;
break;
case GLUT_KEY_RIGHT:
slow = 1;
break;
default:
break;
}

if (key == GLUT_KEY_UP)
xRot -= 5.0f;

if (key == GLUT_KEY_DOWN)
xRot += 5.0f;

if (key == GLUT_KEY_LEFT)
yRot -= 5.0f;

if (key == GLUT_KEY_RIGHT)
yRot += 5.0f;

if (key > 356.0f)
xRot = 0.0f;

if (key < -1.0f)
xRot = 355.0f;

if (key > 356.0f)
yRot = 0.0f;

if (key < -1.0f)
yRot = 355.0f;

// Refresh the Window
glutPostRedisplay();
}

void ChangeSize(int w, int h)
{
GLfloat nRange = 100.0f;

// Prevent a divide by zero
if (h == 0)
h = 1;

// Set Viewport to window dimensions
glViewport(0, 0, w, h);

// Reset coordinate system
glMatrixMode(GL_PROJECTION);
glLoadIdentity();

// Establish clipping volume (left, right, bottom, top, near, far)
if (w <= h)
glOrtho(-nRange, nRange, -nRange * h / w, nRange*h / w, -nRange, nRange);
else
glOrtho(-nRange * w / h, nRange*w / h, -nRange, nRange, -nRange, nRange);

glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
}

void mouse(int button, int state, int x, int y)
{
switch (button) {
case GLUT_LEFT_BUTTON:
if (state == GLUT_DOWN)
//glutIdleFunc(spinDisplay);
//xRot += 1.0;
//yRot += 1.0;
slow = 0;
break;
case GLUT_MIDDLE_BUTTON:
case GLUT_RIGHT_BUTTON:
if (state == GLUT_DOWN)
//glutIdleFunc(NULL); 
//xRot += 15;
//yRot += 15;
slow = 1;

break;
default:
break;
}
}

int main(int argc, char* argv[])
{

glutInit(&argc, argv);
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
glutCreateWindow("Lines Example");
glutReshapeFunc(ChangeSize);
glutSpecialFunc(SpecialKeys);
glutDisplayFunc(RenderScene);
SetupRC();

glutMouseFunc(mouse);

glutMainLoop();

return 0;
}

